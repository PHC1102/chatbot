"""
Test script for Hospital RAG functionality
"""
import sys
import os

# Add the current directory to the path
sys.path.append(os.path.dirname(__file__))

def test_hospital_rag():
    """Test hospital RAG functionality"""
    print("Testing Hospital RAG functionality...")
    print("="*50)
    
    try:
        from services.rag_service import RAGService
        
        rag_service = RAGService()
        
        # Test queries for different districts
        test_queries = [
            "T√¨m c∆° s·ªü da li·ªÖu ·ªü qu·∫≠n Long Bi√™n",
            "Ph√≤ng kh√°m da li·ªÖu t·∫°i qu·∫≠n C·∫ßu Gi·∫•y",
            "B·ªánh vi·ªán da li·ªÖu ·ªü qu·∫≠n ƒê·ªëng ƒêa",
            "C∆° s·ªü ch·ªØa tr·ªã da li·ªÖu t·∫°i Ho√†n Ki·∫øm",
            "Ph√≤ng kh√°m da li·ªÖu qu·∫≠n T√¢y H·ªì",
            "Da li·ªÖu ·ªü huy·ªán S√≥c S∆°n",
            "C∆° s·ªü da li·ªÖu qu·∫≠n Ba ƒê√¨nh",
            "B·ªánh vi·ªán da li·ªÖu Thanh Xu√¢n",
            "Ph√≤ng kh√°m qu·∫≠n kh√¥ng t·ªìn t·∫°i",  # Test non-existent district
            "Cho t√¥i th√¥ng tin v·ªÅ melanoma",  # Disease query (should use disease RAG)
        ]
        
        for query in test_queries:
            print(f"\nüîç Query: {query}")
            print("-" * 40)
            
            # Check query type detection
            is_hospital = rag_service._is_hospital_related_query(query)
            is_disease = rag_service._is_disease_related_query(query)
            
            print(f"Hospital-related: {is_hospital}")
            print(f"Disease-related: {is_disease}")
            
            # Get context
            context, images = rag_service.retrieve_relevant_context(query)
            
            if context:
                print("üìã Retrieved context:")
                # Show first 300 characters to avoid too much output
                print(context[:300] + "..." if len(context) > 300 else context)
            else:
                print("‚ùå No context found")
            
            if images:
                print(f"üñºÔ∏è Images found: {len(images)}")
            
            print()
    
    except Exception as e:
        print(f"‚ùå Error in hospital RAG test: {str(e)}")

def test_district_extraction():
    """Test district extraction functionality"""
    print("\n" + "="*50)
    print("Testing District Extraction")
    print("="*50)
    
    try:
        from services.rag_service import RAGService
        
        rag_service = RAGService()
        
        test_cases = [
            ("T√¨m ph√≤ng kh√°m da li·ªÖu ·ªü qu·∫≠n Long Bi√™n", "Long Bi√™n"),
            ("C∆° s·ªü da li·ªÖu t·∫°i qu·∫≠n C·∫ßu Gi·∫•y", "C·∫ßu Gi·∫•y"),
            ("B·ªánh vi·ªán ·ªü ƒê·ªëng ƒêa", "ƒê·ªëng ƒêa"),
            ("Ph√≤ng kh√°m qu·∫≠n Ho√†n Ki·∫øm", "Ho√†n Ki·∫øm"),
            ("Da li·ªÖu huy·ªán S√≥c S∆°n", "S√≥c S∆°n"),
            ("T√¨m b√°c sƒ© ·ªü T√¢y H·ªì", "T√¢y H·ªì"),
            ("Ph√≤ng kh√°m da li·ªÖu", None),  # No district mentioned
            ("B·ªánh xyz ·ªü qu·∫≠n kh√¥ng t·ªìn t·∫°i", None),  # Non-existent district
        ]
        
        for query, expected in test_cases:
            extracted = rag_service._extract_district_from_query(query)
            status = "‚úÖ" if extracted == expected else "‚ùå"
            print(f"{status} Query: '{query}'")
            print(f"    Expected: {expected}")
            print(f"    Got: {extracted}")
            print()
            
    except Exception as e:
        print(f"‚ùå Error in district extraction test: {str(e)}")

def test_hospital_database_access():
    """Test hospital database access"""
    print("\n" + "="*50)
    print("Testing Hospital Database Access")
    print("="*50)
    
    try:
        from services.rag_service import RAGService
        
        rag_service = RAGService()
        
        # Test getting hospitals by district
        test_districts = ["Long Bi√™n", "C·∫ßu Gi·∫•y", "ƒê·ªëng ƒêa", "NonExistent"]
        
        for district in test_districts:
            hospitals = rag_service._get_hospitals_by_district(district)
            print(f"üè• District: {district}")
            print(f"    Found {len(hospitals)} hospitals")
            
            if hospitals:
                # Show first hospital as example
                first_hospital = hospitals[0]
                print(f"    Example: {first_hospital['name']}")
                print(f"    Address: {first_hospital['address']}")
            print()
            
    except Exception as e:
        print(f"‚ùå Error in hospital database test: {str(e)}")

def test_enhanced_prompt():
    """Test enhanced prompt generation"""
    print("\n" + "="*50)
    print("Testing Enhanced Prompt Generation")
    print("="*50)
    
    try:
        from services.rag_service import RAGService
        
        rag_service = RAGService()
        
        # Test hospital query
        hospital_query = "Ph√≤ng kh√°m da li·ªÖu ·ªü qu·∫≠n Long Bi√™n"
        base_prompt = "B·∫°n l√† chuy√™n gia da li·ªÖu"
        
        enhanced_prompt, images = rag_service.enhance_prompt_with_rag(hospital_query, base_prompt)
        
        print("üè• Hospital Query Enhancement:")
        print(f"Query: {hospital_query}")
        if "CH·ªà D·∫ÆN ƒê·∫∂C BI·ªÜT CHO C∆† S·ªû Y T·∫æ" in enhanced_prompt:
            print("‚úÖ Rule-based instruction found in prompt")
        else:
            print("‚ùå Rule-based instruction NOT found")
            # print(f"Debug - prompt contains: {enhanced_prompt[:500]}...")  # Comment out debug
        
        # Test disease query
        disease_query = "Tri·ªáu ch·ª©ng c·ªßa melanoma"
        enhanced_prompt_disease, images_disease = rag_service.enhance_prompt_with_rag(disease_query, base_prompt)
        
        print("\nü¶† Disease Query Enhancement:")
        print(f"Query: {disease_query}")
        if "TR·∫¢ L·ªúI NG·∫ÆN G·ªåN, S√öC T√çCH" in enhanced_prompt_disease:
            print("‚úÖ Concise instruction found in prompt")
        else:
            print("‚ùå Concise instruction NOT found")
            
    except Exception as e:
        print(f"‚ùå Error in enhanced prompt test: {str(e)}")

def main():
    """Run all tests"""
    print("üß™ HOSPITAL RAG FUNCTIONALITY TESTS")
    print("="*60)
    
    test_hospital_rag()
    test_district_extraction()
    test_hospital_database_access()
    test_enhanced_prompt()
    
    print("\n" + "="*60)
    print("üéâ All tests completed!")
    print("\nüìù To test in the app:")
    print("1. Run: streamlit run app.py")
    print("2. Ask: 'Ph√≤ng kh√°m da li·ªÖu ·ªü qu·∫≠n Long Bi√™n'")
    print("3. Should get exact results from database only")

if __name__ == "__main__":
    main()